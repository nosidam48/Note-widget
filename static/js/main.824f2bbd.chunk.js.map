{"version":3,"sources":["Components/Message/message.tsx","Components/BottomLeft/index.tsx","Components/BottomRight/index.tsx","Components/TopLeft/index.tsx","Components/TopRight/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Message","state","message","position","type","handleChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","handleSubmit","preventDefault","document","getElementById","msgbox","createElement","innerHTML","classList","add","prepend","append","setTimeout","style","opacity","addEventListener","removeChild","alert","react_default","a","htmlFor","this","onChange","id","onClick","React","Component","BottomLeft","className","BottomRight","TopLeft","TopRight","App","Components_TopLeft","Components_TopRight","Components_BottomLeft","Components_BottomRight","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.824f2bbd.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Message extends React.Component {\n    \n    state = {\n            message: \"\",\n            position: 'topLeft',\n            type: 'alert'\n        }\n\n    handleChange = (event: any) => {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault()\n\n        let message: string = this.state.message\n        let position: string = this.state.position\n        let type: string = this.state.type;\n\n        if (!message) {\n            alert(\"You got nothing to say?!\");\n            return\n        }\n        let target = document.getElementById(position)\n\n        let msgbox = document.createElement(\"p\")\n\n        msgbox.innerHTML = message;\n\n        msgbox.classList.add(type);\n\n        if(position === \"topLeft\" || position === \"topRight\") {\n               target!.prepend(msgbox)\n        }\n        if (position === \"bottomLeft\" || position === \"bottomRight\") {\n               target!.append(msgbox)\n        }\n        \n        setTimeout(() => {\n            msgbox.style.opacity = \"0\"\n            msgbox.addEventListener(\"transitionend\", destroyMessage, false)\n            function destroyMessage() {\n                target!.removeChild(msgbox)\n            }\n        }, 3000)\n    }\n\n    \n    render() {\n        return (\n            <div>\n            <form>\n            <label htmlFor=\"message\">Message:\n            <input type=\"text\" value={this.state.message} onChange={this.handleChange} id=\"message\" name=\"message\"></input>\n            </label>\n            <br></br>\n            <label htmlFor=\"position\">Location: \n            <select value={this.state.position} onChange={this.handleChange} id=\"position\" name=\"position\">\n            <option value=\"topLeft\">Top-left</option>\n            <option value=\"topRight\">Top-right</option>\n            <option value=\"bottomLeft\">Bottom-left</option>\n            <option value=\"bottomRight\">Bottom-right</option>\n            </select>\n            </label>\n            <br></br>\n            <label htmlFor=\"type\">Type: \n            <select value={this.state.type} onChange={this.handleChange} id=\"type\" name=\"type\">\n            <option value=\"info\">Info</option>\n            <option value=\"alert\">Alert</option>\n            <option value=\"warning\">Warning</option>\n            </select>\n            </label>\n            <br></br>\n            <button type=\"submit\" id=\"submit\" onClick={this.handleSubmit}>Transmit</button>\n            </form>\n            </div>\n        )\n    }\n}\n\nexport default Message;","import React from \"react\";\n\nfunction BottomLeft() {\n    return(\n        <div className=\"note\" id=\"bottomLeft\"></div>\n    )\n}\n\nexport default BottomLeft","import React from \"react\";\n\nfunction BottomRight() {\n    return(\n        <div className=\"note\" id=\"bottomRight\"></div>\n    )\n}\n\nexport default BottomRight","import React from \"react\";\n\nfunction TopLeft() {\n    return(\n        <div className=\"note\" id=\"topLeft\"></div>\n    )\n}\n\nexport default TopLeft","import React from \"react\";\n\nfunction TopRight() {\n    return(\n        <div className=\"note\" id=\"topRight\"></div>\n    )\n}\n\nexport default TopRight","import React from 'react';\nimport './App.css';\nimport Message from \"./Components/Message/message\";\nimport BottomLeft from \"./Components/BottomLeft/index\";\nimport BottomRight from \"./Components/BottomRight/index\";\nimport TopLeft from \"./Components/TopLeft/index\";\nimport TopRight from \"./Components/TopRight/index\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Notefun</h1>\n      <TopLeft></TopLeft>\n      <TopRight></TopRight>\n      <BottomLeft></BottomLeft>\n      <BottomRight></BottomRight>\n      <Message></Message>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}